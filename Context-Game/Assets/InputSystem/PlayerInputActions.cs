//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""8d9cdcd6-7099-4b2a-8f3b-4b432e7ce975"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""18e8d37f-77f3-4afb-971c-93c33e5e2c44"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MovementArtist"",
                    ""type"": ""Value"",
                    ""id"": ""0f6c651f-6d1f-4cb5-8fc4-cbe775b406f8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovementDeveloper"",
                    ""type"": ""Value"",
                    ""id"": ""db6d099e-f683-4f16-8d89-a2867fd6c136"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovementDesigner"",
                    ""type"": ""Value"",
                    ""id"": ""48ee38a7-8d99-4816-bc04-195dd70e025b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovementKeyboard"",
                    ""type"": ""Value"",
                    ""id"": ""111a1833-6c04-43bb-8160-f99ac80d99fb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MovementController"",
                    ""type"": ""Value"",
                    ""id"": ""03957319-d494-499a-b298-5869bfbcec99"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""944cd77a-723d-4c54-9481-1f54a1010107"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""be029e7d-e0d3-4251-b9ca-2908c321b87e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementArtist"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""69db42a9-7751-4ab4-81f6-c2c1c2e55da1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MovementArtist"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f821ee0c-c4f9-4f04-b3fd-6a599d03eff9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MovementArtist"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1b0384b9-a84f-417a-a62a-9b95bbcdbdbb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MovementArtist"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""235ad30d-d010-4e6d-a17e-eddd00d0df71"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MovementArtist"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9f2a733d-840f-4d84-8869-978180dfd0e4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementDeveloper"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8fae5f42-c75b-4e19-98df-004c0d6dd7ca"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MovementDeveloper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2e1e8011-bfb0-4577-887d-fed928c68d13"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MovementDeveloper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ea7e7689-ebb0-4c30-bdd6-2d8e80649758"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MovementDeveloper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8ce8582d-09aa-4ed4-ae8e-e7a98977fc80"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MovementDeveloper"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7b30fab5-f727-4198-ad31-01eaa9ced568"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementDesigner"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""39d471da-4a03-4413-be63-07a06ec85fd4"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MovementDesigner"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b066fc31-a4a4-4014-99aa-070c447f1391"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MovementDesigner"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""40d72257-063a-4fb2-9608-8abf29979e27"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MovementDesigner"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4ba8c965-328d-4933-96a4-944cfc018bb9"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MovementDesigner"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3981ab77-9bbf-4760-a29c-e7a79b74cf0e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementKeyboard"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5c15b502-a259-46ca-b921-fdcc36fdadcd"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MovementKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""345c1fad-c168-409d-9f12-af62e6fb7ae4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MovementKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d826f845-3726-4702-b373-4b1a6306d5ea"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MovementKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8216d969-474c-4f7c-a477-4f3d35e872fd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MovementKeyboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""495a5d6e-3ff5-4baf-a927-f6657c39ccea"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementController"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""8a2e4d25-9fdf-40d4-9d44-0dc6b2eaf85a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MovementController"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""6f89f055-53eb-47ce-b474-2bc7667e39cc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MovementController"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""d778f75b-33a1-4782-9acd-3627194f1777"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementController"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""76db1f68-04d5-4a95-878b-3fcbdd14ab1d"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovementController"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""79d86021-9f6d-40c7-a03b-d3340f36ea05"",
            ""actions"": [
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""8dfee9c7-8c6a-4a8e-87ff-656a50cc12d4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""734c0556-00b7-4330-982a-cad98647c6fb"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerArtist"",
            ""id"": ""a742ff8f-b695-41ba-bfde-3c2b1cc7a760"",
            ""actions"": [
                {
                    ""name"": ""InputArtistE"",
                    ""type"": ""Value"",
                    ""id"": ""647911f8-8f0f-4730-a341-02d2e7ba5386"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""InputArtistQ"",
                    ""type"": ""Value"",
                    ""id"": ""d9ed867b-32c4-4c03-8d40-2c654170d51f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a5879c2e-b166-43dc-9564-20229951e48d"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""InputArtistQ"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""17baa184-8174-4c3a-842f-1815c3f62a1d"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""InputArtistE"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerDeveloper"",
            ""id"": ""29efb38b-5fdd-4162-8b47-3f5e261621a4"",
            ""actions"": [
                {
                    ""name"": ""InputDeveloperY"",
                    ""type"": ""Value"",
                    ""id"": ""bf9d9656-c56a-4ae3-ab44-52db093026ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""InputDeveloperR"",
                    ""type"": ""Value"",
                    ""id"": ""a0e8a1b4-3e99-42d0-ab16-605c455794c6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c155d955-3150-4517-a4dd-d309973deb11"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""InputDeveloperR"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a79c42eb-252c-4a58-8f2d-4f9bbe1f189e"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""InputDeveloperY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PlayerDesigner"",
            ""id"": ""08061a8c-5064-4677-9720-d487d0c4ec05"",
            ""actions"": [
                {
                    ""name"": ""InputDesignerO"",
                    ""type"": ""Value"",
                    ""id"": ""730223dc-1335-4f5d-8bae-36f47655dbe5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""InputDesignerU"",
                    ""type"": ""Value"",
                    ""id"": ""134f7bb2-f79a-4b31-b504-71574aeb2859"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8179e11d-464a-43f9-a98b-dfd5cb858eee"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""InputDesignerU"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""03593ab8-39bf-4078-93a4-83730ef3022e"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""InputDesignerO"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_MovementArtist = m_Player.FindAction("MovementArtist", throwIfNotFound: true);
        m_Player_MovementDeveloper = m_Player.FindAction("MovementDeveloper", throwIfNotFound: true);
        m_Player_MovementDesigner = m_Player.FindAction("MovementDesigner", throwIfNotFound: true);
        m_Player_MovementKeyboard = m_Player.FindAction("MovementKeyboard", throwIfNotFound: true);
        m_Player_MovementController = m_Player.FindAction("MovementController", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Submit = m_UI.FindAction("Submit", throwIfNotFound: true);
        // PlayerArtist
        m_PlayerArtist = asset.FindActionMap("PlayerArtist", throwIfNotFound: true);
        m_PlayerArtist_InputArtistE = m_PlayerArtist.FindAction("InputArtistE", throwIfNotFound: true);
        m_PlayerArtist_InputArtistQ = m_PlayerArtist.FindAction("InputArtistQ", throwIfNotFound: true);
        // PlayerDeveloper
        m_PlayerDeveloper = asset.FindActionMap("PlayerDeveloper", throwIfNotFound: true);
        m_PlayerDeveloper_InputDeveloperY = m_PlayerDeveloper.FindAction("InputDeveloperY", throwIfNotFound: true);
        m_PlayerDeveloper_InputDeveloperR = m_PlayerDeveloper.FindAction("InputDeveloperR", throwIfNotFound: true);
        // PlayerDesigner
        m_PlayerDesigner = asset.FindActionMap("PlayerDesigner", throwIfNotFound: true);
        m_PlayerDesigner_InputDesignerO = m_PlayerDesigner.FindAction("InputDesignerO", throwIfNotFound: true);
        m_PlayerDesigner_InputDesignerU = m_PlayerDesigner.FindAction("InputDesignerU", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_MovementArtist;
    private readonly InputAction m_Player_MovementDeveloper;
    private readonly InputAction m_Player_MovementDesigner;
    private readonly InputAction m_Player_MovementKeyboard;
    private readonly InputAction m_Player_MovementController;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @MovementArtist => m_Wrapper.m_Player_MovementArtist;
        public InputAction @MovementDeveloper => m_Wrapper.m_Player_MovementDeveloper;
        public InputAction @MovementDesigner => m_Wrapper.m_Player_MovementDesigner;
        public InputAction @MovementKeyboard => m_Wrapper.m_Player_MovementKeyboard;
        public InputAction @MovementController => m_Wrapper.m_Player_MovementController;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @MovementArtist.started += instance.OnMovementArtist;
            @MovementArtist.performed += instance.OnMovementArtist;
            @MovementArtist.canceled += instance.OnMovementArtist;
            @MovementDeveloper.started += instance.OnMovementDeveloper;
            @MovementDeveloper.performed += instance.OnMovementDeveloper;
            @MovementDeveloper.canceled += instance.OnMovementDeveloper;
            @MovementDesigner.started += instance.OnMovementDesigner;
            @MovementDesigner.performed += instance.OnMovementDesigner;
            @MovementDesigner.canceled += instance.OnMovementDesigner;
            @MovementKeyboard.started += instance.OnMovementKeyboard;
            @MovementKeyboard.performed += instance.OnMovementKeyboard;
            @MovementKeyboard.canceled += instance.OnMovementKeyboard;
            @MovementController.started += instance.OnMovementController;
            @MovementController.performed += instance.OnMovementController;
            @MovementController.canceled += instance.OnMovementController;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @MovementArtist.started -= instance.OnMovementArtist;
            @MovementArtist.performed -= instance.OnMovementArtist;
            @MovementArtist.canceled -= instance.OnMovementArtist;
            @MovementDeveloper.started -= instance.OnMovementDeveloper;
            @MovementDeveloper.performed -= instance.OnMovementDeveloper;
            @MovementDeveloper.canceled -= instance.OnMovementDeveloper;
            @MovementDesigner.started -= instance.OnMovementDesigner;
            @MovementDesigner.performed -= instance.OnMovementDesigner;
            @MovementDesigner.canceled -= instance.OnMovementDesigner;
            @MovementKeyboard.started -= instance.OnMovementKeyboard;
            @MovementKeyboard.performed -= instance.OnMovementKeyboard;
            @MovementKeyboard.canceled -= instance.OnMovementKeyboard;
            @MovementController.started -= instance.OnMovementController;
            @MovementController.performed -= instance.OnMovementController;
            @MovementController.canceled -= instance.OnMovementController;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Submit;
    public struct UIActions
    {
        private @PlayerInputActions m_Wrapper;
        public UIActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Submit => m_Wrapper.m_UI_Submit;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Submit.started += instance.OnSubmit;
            @Submit.performed += instance.OnSubmit;
            @Submit.canceled += instance.OnSubmit;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Submit.started -= instance.OnSubmit;
            @Submit.performed -= instance.OnSubmit;
            @Submit.canceled -= instance.OnSubmit;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // PlayerArtist
    private readonly InputActionMap m_PlayerArtist;
    private List<IPlayerArtistActions> m_PlayerArtistActionsCallbackInterfaces = new List<IPlayerArtistActions>();
    private readonly InputAction m_PlayerArtist_InputArtistE;
    private readonly InputAction m_PlayerArtist_InputArtistQ;
    public struct PlayerArtistActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerArtistActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @InputArtistE => m_Wrapper.m_PlayerArtist_InputArtistE;
        public InputAction @InputArtistQ => m_Wrapper.m_PlayerArtist_InputArtistQ;
        public InputActionMap Get() { return m_Wrapper.m_PlayerArtist; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerArtistActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerArtistActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerArtistActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerArtistActionsCallbackInterfaces.Add(instance);
            @InputArtistE.started += instance.OnInputArtistE;
            @InputArtistE.performed += instance.OnInputArtistE;
            @InputArtistE.canceled += instance.OnInputArtistE;
            @InputArtistQ.started += instance.OnInputArtistQ;
            @InputArtistQ.performed += instance.OnInputArtistQ;
            @InputArtistQ.canceled += instance.OnInputArtistQ;
        }

        private void UnregisterCallbacks(IPlayerArtistActions instance)
        {
            @InputArtistE.started -= instance.OnInputArtistE;
            @InputArtistE.performed -= instance.OnInputArtistE;
            @InputArtistE.canceled -= instance.OnInputArtistE;
            @InputArtistQ.started -= instance.OnInputArtistQ;
            @InputArtistQ.performed -= instance.OnInputArtistQ;
            @InputArtistQ.canceled -= instance.OnInputArtistQ;
        }

        public void RemoveCallbacks(IPlayerArtistActions instance)
        {
            if (m_Wrapper.m_PlayerArtistActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerArtistActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerArtistActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerArtistActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerArtistActions @PlayerArtist => new PlayerArtistActions(this);

    // PlayerDeveloper
    private readonly InputActionMap m_PlayerDeveloper;
    private List<IPlayerDeveloperActions> m_PlayerDeveloperActionsCallbackInterfaces = new List<IPlayerDeveloperActions>();
    private readonly InputAction m_PlayerDeveloper_InputDeveloperY;
    private readonly InputAction m_PlayerDeveloper_InputDeveloperR;
    public struct PlayerDeveloperActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerDeveloperActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @InputDeveloperY => m_Wrapper.m_PlayerDeveloper_InputDeveloperY;
        public InputAction @InputDeveloperR => m_Wrapper.m_PlayerDeveloper_InputDeveloperR;
        public InputActionMap Get() { return m_Wrapper.m_PlayerDeveloper; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerDeveloperActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerDeveloperActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerDeveloperActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerDeveloperActionsCallbackInterfaces.Add(instance);
            @InputDeveloperY.started += instance.OnInputDeveloperY;
            @InputDeveloperY.performed += instance.OnInputDeveloperY;
            @InputDeveloperY.canceled += instance.OnInputDeveloperY;
            @InputDeveloperR.started += instance.OnInputDeveloperR;
            @InputDeveloperR.performed += instance.OnInputDeveloperR;
            @InputDeveloperR.canceled += instance.OnInputDeveloperR;
        }

        private void UnregisterCallbacks(IPlayerDeveloperActions instance)
        {
            @InputDeveloperY.started -= instance.OnInputDeveloperY;
            @InputDeveloperY.performed -= instance.OnInputDeveloperY;
            @InputDeveloperY.canceled -= instance.OnInputDeveloperY;
            @InputDeveloperR.started -= instance.OnInputDeveloperR;
            @InputDeveloperR.performed -= instance.OnInputDeveloperR;
            @InputDeveloperR.canceled -= instance.OnInputDeveloperR;
        }

        public void RemoveCallbacks(IPlayerDeveloperActions instance)
        {
            if (m_Wrapper.m_PlayerDeveloperActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerDeveloperActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerDeveloperActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerDeveloperActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerDeveloperActions @PlayerDeveloper => new PlayerDeveloperActions(this);

    // PlayerDesigner
    private readonly InputActionMap m_PlayerDesigner;
    private List<IPlayerDesignerActions> m_PlayerDesignerActionsCallbackInterfaces = new List<IPlayerDesignerActions>();
    private readonly InputAction m_PlayerDesigner_InputDesignerO;
    private readonly InputAction m_PlayerDesigner_InputDesignerU;
    public struct PlayerDesignerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerDesignerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @InputDesignerO => m_Wrapper.m_PlayerDesigner_InputDesignerO;
        public InputAction @InputDesignerU => m_Wrapper.m_PlayerDesigner_InputDesignerU;
        public InputActionMap Get() { return m_Wrapper.m_PlayerDesigner; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerDesignerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerDesignerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerDesignerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerDesignerActionsCallbackInterfaces.Add(instance);
            @InputDesignerO.started += instance.OnInputDesignerO;
            @InputDesignerO.performed += instance.OnInputDesignerO;
            @InputDesignerO.canceled += instance.OnInputDesignerO;
            @InputDesignerU.started += instance.OnInputDesignerU;
            @InputDesignerU.performed += instance.OnInputDesignerU;
            @InputDesignerU.canceled += instance.OnInputDesignerU;
        }

        private void UnregisterCallbacks(IPlayerDesignerActions instance)
        {
            @InputDesignerO.started -= instance.OnInputDesignerO;
            @InputDesignerO.performed -= instance.OnInputDesignerO;
            @InputDesignerO.canceled -= instance.OnInputDesignerO;
            @InputDesignerU.started -= instance.OnInputDesignerU;
            @InputDesignerU.performed -= instance.OnInputDesignerU;
            @InputDesignerU.canceled -= instance.OnInputDesignerU;
        }

        public void RemoveCallbacks(IPlayerDesignerActions instance)
        {
            if (m_Wrapper.m_PlayerDesignerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerDesignerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerDesignerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerDesignerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerDesignerActions @PlayerDesigner => new PlayerDesignerActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMovementArtist(InputAction.CallbackContext context);
        void OnMovementDeveloper(InputAction.CallbackContext context);
        void OnMovementDesigner(InputAction.CallbackContext context);
        void OnMovementKeyboard(InputAction.CallbackContext context);
        void OnMovementController(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnSubmit(InputAction.CallbackContext context);
    }
    public interface IPlayerArtistActions
    {
        void OnInputArtistE(InputAction.CallbackContext context);
        void OnInputArtistQ(InputAction.CallbackContext context);
    }
    public interface IPlayerDeveloperActions
    {
        void OnInputDeveloperY(InputAction.CallbackContext context);
        void OnInputDeveloperR(InputAction.CallbackContext context);
    }
    public interface IPlayerDesignerActions
    {
        void OnInputDesignerO(InputAction.CallbackContext context);
        void OnInputDesignerU(InputAction.CallbackContext context);
    }
}
